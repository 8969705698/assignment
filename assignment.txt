Step 1: Set up the Rails Application

Install Rails if you haven't already: gem install rails
Create a new Rails application: rails new receptionist_doctor_portal
Move into the application directory: cd receptionist_doctor_portal
Step 2: Set up the Database

Open the config/database.yml file and update the default configuration to use PostgreSQL:
yaml
Copy code
default: &default
  adapter: postgresql
  encoding: unicode
  username: YOUR_USERNAME
  password: YOUR_PASSWORD
  host: localhost
Replace YOUR_USERNAME and YOUR_PASSWORD with your PostgreSQL credentials.

Step 3: Generate Models and Migrations

Generate the models and migrations for the Patient model: rails generate model Patient name:string age:integer
Generate the models and migrations for the User model (for authentication): rails generate model User email:string password_digest:string role:string
Run the migrations: rails db:create && rails db:migrate
Step 4: Implement Authentication

Add the bcrypt gem to your Gemfile: gem 'bcrypt', '~> 3.1.7'
Run bundle install to install the gem.
Add the has_secure_password method to the User model.
ruby
Copy code
class User < ApplicationRecord
  has_secure_password

  # Add validation if required
end
Implement the authentication logic in the SessionsController.
ruby
Copy code
class SessionsController < ApplicationController
  def new
  end

  def create
    user = User.find_by(email: params[:email])
    if user && user.authenticate(params[:password])
      session[:user_id] = user.id
      redirect_to root_path
    else
      flash.now[:alert] = 'Invalid email or password'
      render :new
    end
  end

  def destroy
    session[:user_id] = nil
    redirect_to root_path
  end
end
Create a new view for the login page: app/views/sessions/new.html.erb
Step 5: Implement Receptionist Functionality

Generate the controller for the Receptionist portal: rails generate controller Receptionists patients
Implement the CRUD operations in the PatientsController:
ruby
Copy code
class Receptionists::PatientsController < ApplicationController
  before_action :authenticate_user!

  def index
    @patients = Patient.all
  end

  def new
    @patient = Patient.new
  end

  def create
    @patient = Patient.new(patient_params)
    if @patient.save
      redirect_to receptionists_patients_path, notice: 'Patient created successfully.'
    else
      render :new
    end
  end

  def edit
    @patient = Patient.find(params[:id])
  end

  def update
    @patient = Patient.find(params[:id])
    if @patient.update(patient_params)
      redirect_to receptionists_patients_path, notice: 'Patient updated successfully.'
    else
      render :edit
    end
  end

  def destroy
    @patient = Patient.find(params[:id])
    @patient.destroy
    redirect_to receptionists_patients_path, notice: 'Patient deleted successfully.'
  end

  private

  def patient_params
    params.require(:patient).permit(:name, :age)
  end
end
Create the views for the receptionist portal: app/views/receptionists/patients/
index.html.erb
new.html.erb
edit.html.erb
Step 6: Implement Doctor Functionality

Generate the controller for the Doctor portal: rails generate controller Doctors patients
Implement the view for the patient graph in the PatientsController:
ruby
Copy code
class Doctors::PatientsController < ApplicationController
  before_action :authenticate_user!

  def index
    @patients = Patient.all
  end

  def graph
    @patients_count_by_day = Patient.group_by_day(:created_at).count
  end
end
Create the views for the doctor portal: app/views/doctors/patients/
index.html.erb
graph.html.erb
Step 7: Set Up Routes

Update the config/routes.rb file:
ruby
Copy code
Rails.application.routes.draw do
  root 'sessions#new'

  resource :session, only: [:new, :create, :destroy]

  namespace :receptionists do
    resources :patients
  end

  namespace :doctors do
    resources :patients do
      get 'graph', on: :collection
    end
  end
end
Step 8: Run the Application

Start the Rails server: rails server
Open your browser and access the application at http://localhost:3000
That's it! You now have a basic Ruby on Rails application with a receptionist portal and a doctor portal. The receptionist can perform CRUD operations on patients, and the doctor can view all patients and a graph representing the number of patients registered over days